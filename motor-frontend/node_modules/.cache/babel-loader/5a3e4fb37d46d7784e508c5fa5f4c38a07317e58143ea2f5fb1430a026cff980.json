{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\3-Phase-AC-Motor-Simulation\\\\motor-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [rpm, setRpm] = useState(0);\n  const [temperature, setTemperature] = useState(null);\n  const [images, setImages] = useState([]);\n  const rpmSteps = [0, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 3000];\n  const rpmData = {\n    0: {\n      temperature: 25,\n      images: [\"url1.jpg\"]\n    },\n    2000: {\n      temperature: 637.6853,\n      images: [\"motor-frontend/image/2000heat.jpg\", \"url3.jpg\"]\n    },\n    2100: {\n      temperature: 649.0876,\n      images: [\"url4.jpg\"]\n    },\n    2200: {\n      temperature: 664.5388,\n      images: [\"url5.jpg\"]\n    },\n    2300: {\n      temperature: 685.4056,\n      images: [\"url6.jpg\"]\n    },\n    2400: {\n      temperature: 703.2339,\n      images: [\"url7.jpg\"]\n    },\n    2500: {\n      temperature: 714.6644,\n      images: [\"url8.jpg\"]\n    },\n    2600: {\n      temperature: 731.3327,\n      images: [\"url9.jpg\"]\n    },\n    2700: {\n      temperature: 65,\n      images: [\"url10.jpg\"]\n    },\n    2800: {\n      temperature: 772.2987,\n      images: [\"url11.jpg\"]\n    },\n    3000: {\n      temperature: 75,\n      images: [\"url12.jpg\"]\n    }\n  };\n  useEffect(() => {\n    const fetchInitialRpm = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/get-rpm\");\n        const data = await response.json();\n        setRpm(data.rpm);\n        const initialData = rpmData[data.rpm];\n        setTemperature(initialData.temperature);\n        setImages(initialData.images);\n      } catch (error) {\n        console.error(\"Error fetching initial RPM:\", error);\n      }\n    };\n    fetchInitialRpm();\n  }, []);\n  const handleRpmChange = async e => {\n    const index = parseInt(e.target.value, 10);\n    const newRpm = rpmSteps[index];\n    setRpm(newRpm);\n    const data = rpmData[newRpm];\n    setTemperature(data.temperature);\n    setImages(data.images);\n    try {\n      await fetch(\"http://localhost:5000/update-rpm\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          rpm: newRpm\n        })\n      });\n    } catch (error) {\n      console.error(\"Error updating RPM on the backend:\", error);\n    }\n  };\n  const calculateRotorSpeed = rpm => {\n    if (rpm === 0) return \"paused\";\n    let duration;\n    if (rpm === 2800) {\n      duration = 0.03;\n    } else {\n      const normalizedRpm = 3000 - rpm;\n      duration = normalizedRpm / 3000 * 0.8 + 0.02;\n    }\n    return `${duration}s`;\n  };\n  const rotorSpeed = calculateRotorSpeed(rpm);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Body\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"AC Motor Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"motor-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"motor-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stator-coils\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stator-coil\",\n              style: {\n                transform: \"rotate(0deg) translateX(80px)\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stator-coil\",\n              style: {\n                transform: \"rotate(120deg) translateX(80px)\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stator-coil\",\n              style: {\n                transform: \"rotate(240deg) translateX(80px)\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rotor\",\n            style: {\n              animationDuration: rotorSpeed,\n              animationPlayState: rpm === 0 ? \"paused\" : \"running\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"rotor-blade\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"rotor-blade\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"rotor-blade\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"rotor-blade\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"motor-data\",\n        children: [\"RPM: \", rpm]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: rpmSteps.length - 1,\n          step: \"1\",\n          value: rpmSteps.indexOf(rpm),\n          onChange: handleRpmChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-labels\",\n          children: rpmSteps.map((step, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              width: `${100 / (rpmSteps.length - 1)}%`,\n              textAlign: \"center\"\n            },\n            children: step\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), temperature !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Temperature: \", temperature, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-gallery\",\n          children: images.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n            src: image,\n            alt: `Motor Image ${index + 1}`\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"j5lYQVZjJHZRrfUMLGqneeq2/Uc=\");\n_c = App;\nexport default App;\n\n// frontend + backend\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   // State to track RPM\n//   const [rpm, setRpm] = useState(0);\n\n//   // State to track temperature and image URLs\n//   const [temperature, setTemperature] = useState(null);\n//   const [images, setImages] = useState([]);\n\n//   // Define RPM steps for the slider\n//   const rpmSteps = [0, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 3000];\n\n//   // Fetch initial RPM value from the backend when the component mounts\n//   useEffect(() => {\n//     const fetchInitialRpm = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:5000/get-rpm\");\n//         const data = await response.json();\n//         setRpm(data.rpm);\n//       } catch (error) {\n//         console.error(\"Error fetching initial RPM:\", error);\n//       }\n//     };\n//     fetchInitialRpm();\n//   }, []);\n\n//   // Handle slider change by mapping index to corresponding RPM value\n//   const handleRpmChange = async (e) => {\n//     const index = parseInt(e.target.value, 10);\n//     const newRpm = rpmSteps[index];\n//     setRpm(newRpm);\n\n//     // Send updated RPM to the backend\n//     try {\n//       await fetch(\"http://localhost:5000/update-rpm\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ rpm: newRpm }),\n//       });\n//     } catch (error) {\n//       console.error(\"Error updating RPM on the backend:\", error);\n//     }\n//   };\n\n//   // Fetch temperature and images when the button is clicked\n//   const handleGetTemperatureAndImages = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:5000/get-temperature-and-images\");\n//       const data = await response.json();\n//       setTemperature(data.temperature); // Assume backend returns { temperature: value, images: [...] }\n//       setImages(data.images);\n//     } catch (error) {\n//       console.error(\"Error fetching temperature and images:\", error);\n//     }\n//   };\n\n//   // Adjust animation duration using an inverted scaling formula for smoother transitions\n//   const calculateRotorSpeed = (rpm) => {\n//     if (rpm === 0) return \"paused\";\n\n//     let duration;\n//     if (rpm === 2800) {\n//       duration = 0.03;\n//     } else {\n//       const normalizedRpm = 3000 - rpm;\n//       duration = (normalizedRpm / 3000) * 0.8 + 0.02;\n//     }\n//     return `${duration}s`;\n//   };\n\n//   const rotorSpeed = calculateRotorSpeed(rpm);\n\n//   return (\n//    <div className=\"Body\"> \n//     <div className=\"App\">\n//       <h1>AC Motor Simulation</h1>\n//       <div className=\"motor-container\">\n//         <div className=\"motor-body\">\n//           <div className=\"stator-coils\">\n//             <div className=\"stator-coil\" style={{ transform: \"rotate(0deg) translateX(80px)\" }}></div>\n//             <div className=\"stator-coil\" style={{ transform: \"rotate(120deg) translateX(80px)\" }}></div>\n//             <div className=\"stator-coil\" style={{ transform: \"rotate(240deg) translateX(80px)\" }}></div>\n//           </div>\n//           <div\n//             className=\"rotor\"\n//             style={{\n//               animationDuration: rotorSpeed,\n//               animationPlayState: rpm === 0 ? \"paused\" : \"running\",\n//             }}\n//           >\n//             <div className=\"rotor-blade\"></div>\n//             <div className=\"rotor-blade\"></div>\n//             <div className=\"rotor-blade\"></div>\n//             <div className=\"rotor-blade\"></div>\n//           </div>\n//         </div>\n//       </div>\n//       <div className=\"motor-data\">RPM: {rpm}</div>\n//       <div className=\"slider-container\">\n//         <input\n//           type=\"range\"\n//           min=\"0\"\n//           max={rpmSteps.length - 1}\n//           step=\"1\"\n//           value={rpmSteps.indexOf(rpm)}\n//           onChange={handleRpmChange}\n//         />\n//         <div className=\"slider-labels\">\n//           {rpmSteps.map((step, index) => (\n//             <span\n//               key={index}\n//               style={{\n//                 width: `${100 / (rpmSteps.length - 1)}%`,\n//                 textAlign: \"center\",\n//               }}\n//             >\n//               {step}\n//             </span>\n//           ))}\n//         </div>\n//       </div>\n//       <button onClick={handleGetTemperatureAndImages}>\n//         Get Temperature & Images\n//       </button>\n//       {temperature !== null && (\n//         <div>\n//           <h2>Temperature: {temperature}°C</h2>\n//           <div className=\"image-gallery\">\n//             {images.map((image, index) => (\n//               <img key={index} src={image} alt={`Motor Image ${index + 1}`} />\n//             ))}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   </div>\n//   );\n// }\n\n// export default App;\n\n// frontend\n\n// import React, { useState } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   // State to track RPM\n//   const [rpm, setRpm] = useState(0);\n\n//   // Define RPM steps for the slider\n//   const rpmSteps = [0, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 3000];\n\n//   // Handle slider change by mapping index to corresponding RPM value\n//   const handleRpmChange = (e) => {\n//     const index = parseInt(e.target.value, 10); // Slider value is an index\n//     setRpm(rpmSteps[index]);\n//   };\n\n//   // Adjust animation duration using an inverted scaling formula for smoother transitions\n//   const calculateRotorSpeed = (rpm) => {\n//     if (rpm === 0) return \"paused\"; // Stop animation if RPM is 0\n\n//     // Custom scaling logic for each RPM value\n//     let duration;\n//     if (rpm === 2800) {\n//       duration = 0.03; // Specifically set duration for 2800 RPM\n//     } else {\n//       const normalizedRpm = 3000 - rpm; // Invert RPM to prioritize higher speeds\n//       duration = (normalizedRpm / 3000) * 0.8 + 0.02; // Scale and add base duration\n//     }\n//     return `${duration}s`; // Return animation duration\n//   };\n\n//   // Calculate the rotor animation duration\n//   const rotorSpeed = calculateRotorSpeed(rpm);\n\n//   return (\n//     <div className=\"App\">\n//       <h1>AC Motor Simulation</h1>\n//       <div className=\"motor-container\">\n//         <div className=\"motor-body\">\n//           {/* Stator coils */}\n//           <div className=\"stator-coils\">\n//             <div className=\"stator-coil\" style={{ transform: \"rotate(0deg) translateX(80px)\" }}></div>\n//             <div className=\"stator-coil\" style={{ transform: \"rotate(120deg) translateX(80px)\" }}></div>\n//             <div className=\"stator-coil\" style={{ transform: \"rotate(240deg) translateX(80px)\" }}></div>\n//           </div>\n//           {/* Rotor */}\n//           <div\n//             className=\"rotor\"\n//             style={{\n//               animationDuration: rotorSpeed, // Set animation duration dynamically\n//               animationPlayState: rpm === 0 ? \"paused\" : \"running\", // Pause if RPM is 0\n//             }}\n//           >\n//             <div className=\"rotor-blade\"></div>\n//             <div className=\"rotor-blade\"></div>\n//             <div className=\"rotor-blade\"></div>\n//             <div className=\"rotor-blade\"></div>\n//           </div>\n//         </div>\n//       </div>\n//       <div className=\"motor-data\">RPM: {rpm}</div>\n//       <div className=\"slider-container\">\n//         <input\n//           type=\"range\"\n//           min=\"0\"\n//           max={rpmSteps.length - 1} // Max value corresponds to the last index of rpmSteps\n//           step=\"1\"\n//           value={rpmSteps.indexOf(rpm)} // Find the index of the current RPM in rpmSteps\n//           onChange={handleRpmChange}\n//         />\n//         <div className=\"slider-labels\">\n//           {rpmSteps.map((step, index) => (\n//             <span\n//               key={index}\n//               style={{\n//                 width: `${100 / (rpmSteps.length - 1)}%`, // Space labels evenly\n//                 textAlign: \"center\",\n//               }}\n//             >\n//               {step}\n//             </span>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","rpm","setRpm","temperature","setTemperature","images","setImages","rpmSteps","rpmData","fetchInitialRpm","response","fetch","data","json","initialData","error","console","handleRpmChange","e","index","parseInt","target","value","newRpm","method","headers","body","JSON","stringify","calculateRotorSpeed","duration","normalizedRpm","rotorSpeed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","transform","animationDuration","animationPlayState","type","min","max","length","step","indexOf","onChange","map","width","textAlign","image","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/3-Phase-AC-Motor-Simulation/motor-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\n\r\nfunction App() {\r\n  const [rpm, setRpm] = useState(0);\r\n  const [temperature, setTemperature] = useState(null);\r\n  const [images, setImages] = useState([]);\r\n  \r\n  const rpmSteps = [0, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 3000];\r\n\r\n  const rpmData = {\r\n    0: { temperature: 25, images: [\"url1.jpg\"] },\r\n    2000: { temperature: 637.6853, images: [\"motor-frontend/image/2000heat.jpg\", \"url3.jpg\"] },\r\n    2100: { temperature: 649.0876, images: [\"url4.jpg\"] },\r\n    2200: { temperature: 664.5388, images: [\"url5.jpg\"] },\r\n    2300: { temperature: 685.4056, images: [\"url6.jpg\"] },\r\n    2400: { temperature: 703.2339, images: [\"url7.jpg\"] },\r\n    2500: { temperature: 714.6644, images: [\"url8.jpg\"] },\r\n    2600: { temperature: 731.3327, images: [\"url9.jpg\"] },\r\n    2700: { temperature: 65, images: [\"url10.jpg\"] },\r\n    2800: { temperature: 772.2987, images: [\"url11.jpg\"] },\r\n    3000: { temperature: 75, images: [\"url12.jpg\"] },\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchInitialRpm = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/get-rpm\");\r\n        const data = await response.json();\r\n        setRpm(data.rpm);\r\n        const initialData = rpmData[data.rpm];\r\n        setTemperature(initialData.temperature);\r\n        setImages(initialData.images);\r\n      } catch (error) {\r\n        console.error(\"Error fetching initial RPM:\", error);\r\n      }\r\n    };\r\n    fetchInitialRpm();\r\n  }, []);\r\n\r\n  const handleRpmChange = async (e) => {\r\n    const index = parseInt(e.target.value, 10);\r\n    const newRpm = rpmSteps[index];\r\n    setRpm(newRpm);\r\n    const data = rpmData[newRpm];\r\n    setTemperature(data.temperature);\r\n    setImages(data.images);\r\n\r\n    try {\r\n      await fetch(\"http://localhost:5000/update-rpm\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ rpm: newRpm }),\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error updating RPM on the backend:\", error);\r\n    }\r\n  };\r\n\r\n  const calculateRotorSpeed = (rpm) => {\r\n        if (rpm === 0) return \"paused\";\r\n    \r\n        let duration;\r\n        if (rpm === 2800) {\r\n          duration = 0.03;\r\n        } else {\r\n          const normalizedRpm = 3000 - rpm;\r\n          duration = (normalizedRpm / 3000) * 0.8 + 0.02;\r\n        }\r\n        return `${duration}s`;\r\n      };\r\n\r\n  const rotorSpeed = calculateRotorSpeed(rpm);\r\n\r\n  return (\r\n    <div className=\"Body\">\r\n      <div className=\"App\">\r\n        <h1>AC Motor Simulation</h1>\r\n        <div className=\"motor-container\">\r\n          <div className=\"motor-body\">\r\n            <div className=\"stator-coils\">\r\n              <div className=\"stator-coil\" style={{ transform: \"rotate(0deg) translateX(80px)\" }}></div>\r\n              <div className=\"stator-coil\" style={{ transform: \"rotate(120deg) translateX(80px)\" }}></div>\r\n              <div className=\"stator-coil\" style={{ transform: \"rotate(240deg) translateX(80px)\" }}></div>\r\n            </div>\r\n            <div\r\n              className=\"rotor\"\r\n              style={{\r\n                animationDuration: rotorSpeed,\r\n                animationPlayState: rpm === 0 ? \"paused\" : \"running\",\r\n              }}\r\n            >\r\n              <div className=\"rotor-blade\"></div>\r\n              <div className=\"rotor-blade\"></div>\r\n              <div className=\"rotor-blade\"></div>\r\n              <div className=\"rotor-blade\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"motor-data\">RPM: {rpm}</div>\r\n        <div className=\"slider-container\">\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max={rpmSteps.length - 1}\r\n            step=\"1\"\r\n            value={rpmSteps.indexOf(rpm)}\r\n            onChange={handleRpmChange}\r\n          />\r\n          <div className=\"slider-labels\">\r\n            {rpmSteps.map((step, index) => (\r\n              <span\r\n                key={index}\r\n                style={{ width: `${100 / (rpmSteps.length - 1)}%`, textAlign: \"center\" }}\r\n              >\r\n                {step}\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        {temperature !== null && (\r\n          <div>\r\n            <h2>Temperature: {temperature}°C</h2>\r\n            <div className=\"image-gallery\">\r\n              {images.map((image, index) => (\r\n                <img key={index} src={image} alt={`Motor Image ${index + 1}`} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// frontend + backend\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./App.css\";\r\n\r\n// function App() {\r\n//   // State to track RPM\r\n//   const [rpm, setRpm] = useState(0);\r\n\r\n//   // State to track temperature and image URLs\r\n//   const [temperature, setTemperature] = useState(null);\r\n//   const [images, setImages] = useState([]);\r\n\r\n//   // Define RPM steps for the slider\r\n//   const rpmSteps = [0, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 3000];\r\n\r\n//   // Fetch initial RPM value from the backend when the component mounts\r\n//   useEffect(() => {\r\n//     const fetchInitialRpm = async () => {\r\n//       try {\r\n//         const response = await fetch(\"http://localhost:5000/get-rpm\");\r\n//         const data = await response.json();\r\n//         setRpm(data.rpm);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching initial RPM:\", error);\r\n//       }\r\n//     };\r\n//     fetchInitialRpm();\r\n//   }, []);\r\n\r\n//   // Handle slider change by mapping index to corresponding RPM value\r\n//   const handleRpmChange = async (e) => {\r\n//     const index = parseInt(e.target.value, 10);\r\n//     const newRpm = rpmSteps[index];\r\n//     setRpm(newRpm);\r\n\r\n//     // Send updated RPM to the backend\r\n//     try {\r\n//       await fetch(\"http://localhost:5000/update-rpm\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({ rpm: newRpm }),\r\n//       });\r\n//     } catch (error) {\r\n//       console.error(\"Error updating RPM on the backend:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Fetch temperature and images when the button is clicked\r\n//   const handleGetTemperatureAndImages = async () => {\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:5000/get-temperature-and-images\");\r\n//       const data = await response.json();\r\n//       setTemperature(data.temperature); // Assume backend returns { temperature: value, images: [...] }\r\n//       setImages(data.images);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching temperature and images:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Adjust animation duration using an inverted scaling formula for smoother transitions\r\n//   const calculateRotorSpeed = (rpm) => {\r\n//     if (rpm === 0) return \"paused\";\r\n\r\n//     let duration;\r\n//     if (rpm === 2800) {\r\n//       duration = 0.03;\r\n//     } else {\r\n//       const normalizedRpm = 3000 - rpm;\r\n//       duration = (normalizedRpm / 3000) * 0.8 + 0.02;\r\n//     }\r\n//     return `${duration}s`;\r\n//   };\r\n\r\n//   const rotorSpeed = calculateRotorSpeed(rpm);\r\n\r\n//   return (\r\n//    <div className=\"Body\"> \r\n//     <div className=\"App\">\r\n//       <h1>AC Motor Simulation</h1>\r\n//       <div className=\"motor-container\">\r\n//         <div className=\"motor-body\">\r\n//           <div className=\"stator-coils\">\r\n//             <div className=\"stator-coil\" style={{ transform: \"rotate(0deg) translateX(80px)\" }}></div>\r\n//             <div className=\"stator-coil\" style={{ transform: \"rotate(120deg) translateX(80px)\" }}></div>\r\n//             <div className=\"stator-coil\" style={{ transform: \"rotate(240deg) translateX(80px)\" }}></div>\r\n//           </div>\r\n//           <div\r\n//             className=\"rotor\"\r\n//             style={{\r\n//               animationDuration: rotorSpeed,\r\n//               animationPlayState: rpm === 0 ? \"paused\" : \"running\",\r\n//             }}\r\n//           >\r\n//             <div className=\"rotor-blade\"></div>\r\n//             <div className=\"rotor-blade\"></div>\r\n//             <div className=\"rotor-blade\"></div>\r\n//             <div className=\"rotor-blade\"></div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//       <div className=\"motor-data\">RPM: {rpm}</div>\r\n//       <div className=\"slider-container\">\r\n//         <input\r\n//           type=\"range\"\r\n//           min=\"0\"\r\n//           max={rpmSteps.length - 1}\r\n//           step=\"1\"\r\n//           value={rpmSteps.indexOf(rpm)}\r\n//           onChange={handleRpmChange}\r\n//         />\r\n//         <div className=\"slider-labels\">\r\n//           {rpmSteps.map((step, index) => (\r\n//             <span\r\n//               key={index}\r\n//               style={{\r\n//                 width: `${100 / (rpmSteps.length - 1)}%`,\r\n//                 textAlign: \"center\",\r\n//               }}\r\n//             >\r\n//               {step}\r\n//             </span>\r\n//           ))}\r\n//         </div>\r\n//       </div>\r\n//       <button onClick={handleGetTemperatureAndImages}>\r\n//         Get Temperature & Images\r\n//       </button>\r\n//       {temperature !== null && (\r\n//         <div>\r\n//           <h2>Temperature: {temperature}°C</h2>\r\n//           <div className=\"image-gallery\">\r\n//             {images.map((image, index) => (\r\n//               <img key={index} src={image} alt={`Motor Image ${index + 1}`} />\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n// frontend\r\n\r\n\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import \"./App.css\";\r\n\r\n// function App() {\r\n//   // State to track RPM\r\n//   const [rpm, setRpm] = useState(0);\r\n\r\n//   // Define RPM steps for the slider\r\n//   const rpmSteps = [0, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 3000];\r\n\r\n//   // Handle slider change by mapping index to corresponding RPM value\r\n//   const handleRpmChange = (e) => {\r\n//     const index = parseInt(e.target.value, 10); // Slider value is an index\r\n//     setRpm(rpmSteps[index]);\r\n//   };\r\n\r\n//   // Adjust animation duration using an inverted scaling formula for smoother transitions\r\n//   const calculateRotorSpeed = (rpm) => {\r\n//     if (rpm === 0) return \"paused\"; // Stop animation if RPM is 0\r\n\r\n//     // Custom scaling logic for each RPM value\r\n//     let duration;\r\n//     if (rpm === 2800) {\r\n//       duration = 0.03; // Specifically set duration for 2800 RPM\r\n//     } else {\r\n//       const normalizedRpm = 3000 - rpm; // Invert RPM to prioritize higher speeds\r\n//       duration = (normalizedRpm / 3000) * 0.8 + 0.02; // Scale and add base duration\r\n//     }\r\n//     return `${duration}s`; // Return animation duration\r\n//   };\r\n\r\n//   // Calculate the rotor animation duration\r\n//   const rotorSpeed = calculateRotorSpeed(rpm);\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>AC Motor Simulation</h1>\r\n//       <div className=\"motor-container\">\r\n//         <div className=\"motor-body\">\r\n//           {/* Stator coils */}\r\n//           <div className=\"stator-coils\">\r\n//             <div className=\"stator-coil\" style={{ transform: \"rotate(0deg) translateX(80px)\" }}></div>\r\n//             <div className=\"stator-coil\" style={{ transform: \"rotate(120deg) translateX(80px)\" }}></div>\r\n//             <div className=\"stator-coil\" style={{ transform: \"rotate(240deg) translateX(80px)\" }}></div>\r\n//           </div>\r\n//           {/* Rotor */}\r\n//           <div\r\n//             className=\"rotor\"\r\n//             style={{\r\n//               animationDuration: rotorSpeed, // Set animation duration dynamically\r\n//               animationPlayState: rpm === 0 ? \"paused\" : \"running\", // Pause if RPM is 0\r\n//             }}\r\n//           >\r\n//             <div className=\"rotor-blade\"></div>\r\n//             <div className=\"rotor-blade\"></div>\r\n//             <div className=\"rotor-blade\"></div>\r\n//             <div className=\"rotor-blade\"></div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//       <div className=\"motor-data\">RPM: {rpm}</div>\r\n//       <div className=\"slider-container\">\r\n//         <input\r\n//           type=\"range\"\r\n//           min=\"0\"\r\n//           max={rpmSteps.length - 1} // Max value corresponds to the last index of rpmSteps\r\n//           step=\"1\"\r\n//           value={rpmSteps.indexOf(rpm)} // Find the index of the current RPM in rpmSteps\r\n//           onChange={handleRpmChange}\r\n//         />\r\n//         <div className=\"slider-labels\">\r\n//           {rpmSteps.map((step, index) => (\r\n//             <span\r\n//               key={index}\r\n//               style={{\r\n//                 width: `${100 / (rpmSteps.length - 1)}%`, // Space labels evenly\r\n//                 textAlign: \"center\",\r\n//               }}\r\n//             >\r\n//               {step}\r\n//             </span>\r\n//           ))}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;;AAKA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}